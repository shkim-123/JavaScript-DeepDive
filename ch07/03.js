// [7.3 비교 연산자]

// [7.3.1 동등/일치 비교 연산자]
// 동등 비교(loose equality) 연산자와 일치 비교(strict equality) 연산자는 좌항과 우항의 피연산가 같은 값으로 평가되는지 비교해 불리언 값 반환함

// 동등 비교(==) 연산자는 좌항과 우항의 피연산자를 비교할 때 먼저 암묵적 타입 변환을 통해 타입을 일치시킨 후 같은 값인지 비교함


// [07-12]
// 동등 비교
5 == 5;     // -> true

// 타입은 다르지만 암묵적 타입 변환을 통해 타입을 일치시키면 동등함
5 == '5';   // -> true


// [07-13]
// 동등 비교, 결과를 예측하기 어려움 -> 사용하지 않는 편이 좋음
'0' == '';  // -> false
0 == '';    // -> true
0 == '0';   // -> true
false == 'false';   // -> false
false == 0;         // -> true
false == null;      // -> false
false == undefined; // -> false


// 일치 비교(===) 연산자는 좌항과 우항의 피연산자가 타입도 같고 값도 같은 경우에 한하여 true를 반환함


// [07-14]
// 일치 비교
5 === 5;        // -> true

// 암묵적 타입 변환을 하지 않고 값을 비교함
// 즉, 값과 타입이 모두 같은 경우만 true를 반환함
5 === '5';      // -> false


// [07-15]
// NaN 은 자신과 일치하지 않는 유일한 값임
NaN === NaN;    // -> false


// [07-16]
// isNaN 함수는 지정한 값이 NaN인지 확인하고 그 결과를 불리언 값으로 반환함
isNaN(NaN);     // -> true
isNaN(10);      // -> false
isNaN(1 + undefined);       // -> true


// [07-17]
// 양의 0과 음의 0의 비교, 일치 비교/동등 비교 모두 결과는 true
0 === -0;       // -> true
0 == -0;        // -> true


// ES6 에서 도입된 Object.is 메서드는 예측 가능한 정확한 비교 결과를 반환함
// 그 외에는 일치 비교 연산자(===) 와 동일하게 동작함


// [07-18]
-0 === +0;          // -> true
Object.is(-0, +0);  // -> false

NaN === NaN;            // -> false
Object.is(NaN, NaN);    // -> true


// [07-19]
// 부동등 비교
5 !== 8;     // -> true
5 !== 5;     // -> false
5 !== '5';   // -> true


// [7.3.2 대소 관계 비교 연산자]
// 대소 관계 비교 연산자는 피연산자의 크기를 비교하여 불리언 값을 반환함


// [07-20]
// 대소 관계 비교
5 > 0;      // -> true
5 > 5;      // -> false
5 >= 5;     // -> true
5 <= 5;     // -> true